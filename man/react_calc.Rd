% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactive.R
\name{react_calc}
\alias{react_calc}
\title{Create reactive-style functions that can be run outside of shiny}
\usage{
react_calc(stmts, env = parent.frame())
}
\arguments{
\item{stmts}{bracketed code of the same sort used in \code{shiny::reactive()}}

\item{env}{variable to set the environment in which the statements will be executed.
It would be rare to use the \code{env} variable: the default does what's needed}

\item{...}{a single object (of whatever kind) to be stored in a mock-reactive variable}
}
\description{
Rseplacement for \code{shiny::reactive()}  that makes it
easy to shift between the reactive style in shiny and a mock-reactive style
that can be run in an ordinary session. In the reactive style, values used
in reactive functions are often produced by other reactive functions.
}
\examples{
input <- list(samp_n = 15)
get_data <- react_calc({head(mtcars, input$samp_n, shiny = FALSE)})
make_model <- react_calc({lm(mpg ~ hp, data = get_data())})
find_rsquared <- react_calc({summary(make_model())$r.squared})

find_rsquared()  # the ultimate calculation

v <- reactive_value_holder(7)
v() # get value
v(88) # set value (and return that value)
v() # get value
}
